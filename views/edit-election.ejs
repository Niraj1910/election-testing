<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Election Data</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="stylesheet" href="/stylesheets/tailwind.css">
</head>
<body class="bg-gray-50">
    <%- include('navbar.ejs') %>

    <div class="container mx-auto px-4 py-8">
        <form id="electionForm" class="max-w-6xl mx-auto bg-white rounded-lg shadow-md p-6">
            <!-- Hidden fields -->
            <input type="hidden" name="_id" value="<%= election._id %>">
            <input type="hidden" id="currentUserId" value="<%= user._id %>">
            
            <!-- Main State Info -->
            <div class="grid grid-cols-5 gap-4 mb-8 border-b pb-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700">State</label>
                    <input type="text" name="state" value="<%= election.state %>" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Total Seats</label>
                    <input type="number" name="totalSeats" value="<%= election.totalSeats %>" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Declared Seats</label>
                    <input type="number" name="declaredSeats" value="<%= election.declaredSeats %>" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Half Way Mark</label>
                    <input type="number" name="halfWayMark" value="<%= election.halfWayMark %>" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div id="addPartyContainer" class="flex items-end hidden">
                    <button type="button" onclick="addParty()" class="w-full px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Add Party</button>
                </div>
            </div>

            <!-- Parties Table -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Party Name</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Won</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Leading</th>
                            <th scope="col" id="colorHeader" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden">Color</th>
                            <th scope="col" id="actionsHeader" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="partiesTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Parties will be added here dynamically -->
                    </tbody>
                </table>
            </div>

            <div class="mt-8">
                <button type="submit" class="w-full px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">
                    Update Election Data
                </button>
            </div>
        </form>
    </div>

    <script>
        // Admin IDs list
        const adminIds = ['671001c39c1da4fb1e16d48b', '673c2689d9ec4b86f6b11974', '673c2673d9ec4b86f6b11972', '673c25d0d9ec4b86f6b11962']; // Add your admin IDs here
        let partyCount = 0;
        const electionData = <%- JSON.stringify(election) %>;
        const currentUserId = document.getElementById('currentUserId').value;
        const isAdmin = adminIds.includes(currentUserId);

        function initializeForm() {
            // Show/hide admin controls
            if (isAdmin) {
                document.getElementById('addPartyContainer').classList.remove('hidden');
                document.getElementById('colorHeader').classList.remove('hidden');
                document.getElementById('actionsHeader').classList.remove('hidden');
            }

            electionData.parties.forEach(party => {
                addPartyToTable(party);
            });
        }

        function addPartyToTable(existingParty = null) {
            const tbody = document.getElementById('partiesTableBody');
            const partyId = partyCount++;
            
            const row = document.createElement('tr');
            row.id = `party-${partyId}`;
            
            let rowHtml = `
                <td class="px-6 py-4">
                    <input type="text" name="parties[${partyId}][name]" value="${existingParty ? existingParty.name : ''}" 
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </td>
                <td class="px-6 py-4">
                    <input type="number" name="parties[${partyId}][won]" value="${existingParty ? existingParty.won : '0'}" 
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </td>
                <td class="px-6 py-4">
                    <input type="number" name="parties[${partyId}][leading]" value="${existingParty ? existingParty.leading : '0'}" 
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </td>`;

            if (isAdmin) {
                rowHtml += `
                    <td class="px-6 py-4">
                        <input type="color" name="parties[${partyId}][color]" value="${existingParty ? existingParty.partyColor : '#000000'}" 
                               class="block w-full h-8 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                    </td>
                    <td class="px-6 py-4">
                        <div class="flex space-x-2">
                            <button type="button" onclick="toggleSubParties(${partyId})" class="px-3 py-1 bg-gray-500 text-white rounded-md hover:bg-gray-600">
                                Sub Parties
                            </button>
                            <button type="button" onclick="removeParty(${partyId})" class="px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600">
                                Remove
                            </button>
                        </div>
                    </td>`;
            } else {
                rowHtml += `
                    <td class="hidden">
                        <input type="hidden" name="parties[${partyId}][color]" value="${existingParty ? existingParty.partyColor : '#000000'}">
                    </td>
                    <td class="hidden"></td>`;
            }
            
            row.innerHTML = rowHtml;
            tbody.appendChild(row);

            if (isAdmin) {
                // Add sub-parties section
                const subPartiesRow = document.createElement('tr');
                subPartiesRow.id = `subParties-${partyId}`;
                subPartiesRow.classList.add('hidden');
                subPartiesRow.innerHTML = `
                    <td colspan="5" class="px-6 py-4 bg-gray-50">
                        <div class="space-y-4">
                            <div class="flex justify-between items-center">
                                <h4 class="text-sm font-medium text-gray-700">Sub Parties</h4>
                                <button type="button" onclick="addSubParty(${partyId})" class="px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                                    Add Sub Party
                                </button>
                            </div>
                            <div id="subPartiesContainer-${partyId}" class="space-y-2">
                                <!-- Sub parties will be added here -->
                            </div>
                        </div>
                    </td>
                `;
                tbody.appendChild(subPartiesRow);

                // Add existing sub-parties if any
                if (existingParty && existingParty.subParties) {
                    existingParty.subParties.forEach(subParty => {
                        addSubParty(partyId, subParty);
                    });
                }
            }
        }

        function addSubParty(partyId, existingSubParty = null) {
            if (!isAdmin) return;

            const container = document.getElementById(`subPartiesContainer-${partyId}`);
            const subPartyId = container.children.length;
            
            const subPartyDiv = document.createElement('div');
            subPartyDiv.id = `subParty-${partyId}-${subPartyId}`;
            subPartyDiv.classList.add('grid', 'grid-cols-5', 'gap-4', 'bg-white', 'p-4', 'rounded-md', 'border');
            
            subPartyDiv.innerHTML = `
                <div>
                    <input type="text" name="parties[${partyId}][subParties][${subPartyId}][name]" 
                           value="${existingSubParty ? existingSubParty.name : ''}" 
                           placeholder="Sub Party Name"
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div>
                    <input type="number" name="parties[${partyId}][subParties][${subPartyId}][won]" 
                           value="${existingSubParty ? existingSubParty.won : '0'}" 
                           placeholder="Won"
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div>
                    <input type="number" name="parties[${partyId}][subParties][${subPartyId}][leading]" 
                           value="${existingSubParty ? existingSubParty.leading : '0'}" 
                           placeholder="Leading"
                           class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div>
                    <input type="color" name="parties[${partyId}][subParties][${subPartyId}][color]" 
                           value="${existingSubParty ? existingSubParty.partyColor : '#000000'}" 
                           class="block w-full h-8 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                </div>
                <div>
                    <button type="button" onclick="removeSubParty(${partyId}, ${subPartyId})" 
                            class="px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600">
                        Remove
                    </button>
                </div>
            `;
            
            container.appendChild(subPartyDiv);
        }

        function toggleSubParties(partyId) {
            if (!isAdmin) return;
            const subPartiesRow = document.getElementById(`subParties-${partyId}`);
            subPartiesRow.classList.toggle('hidden');
        }

        function removeParty(partyId) {
            if (!isAdmin) return;
            // show alret before delete 
            if (confirm('Are you sure you want to delete this party?')) {
                const partyRow = document.getElementById(`party-${partyId}`);
                const subPartiesRow = document.getElementById(`subParties-${partyId}`);
                partyRow.remove();
                if (subPartiesRow) subPartiesRow.remove();
            }
        }

        function removeSubParty(partyId, subPartyId) {
            if (!isAdmin) return;
            if(confirm('Are you sure you want to delete this subPart?')){
                const subParty = document.getElementById(`subParty-${partyId}-${subPartyId}`);
                subParty.remove();
            }
        }

        function addParty() {
            if (!isAdmin) return;
            addPartyToTable();
        }

        document.getElementById('electionForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const electionId = formData.get('_id');
            
            // Convert form data to structured object
            const finalData = {
                state: formData.get('state'),
                totalSeats: Number(formData.get('totalSeats')),
                declaredSeats: Number(formData.get('declaredSeats')),
                halfWayMark: Number(formData.get('halfWayMark')),
                parties: []
            };

            // Process parties and sub-parties
            const parties = new Map();
            const subParties = new Map();

            formData.forEach((value, key) => {
                const partyMatch = key.match(/parties\[(\d+)\]\[(\w+)\]/);
                const subPartyMatch = key.match(/parties\[(\d+)\]\[subParties\]\[(\d+)\]\[(\w+)\]/);

                if (partyMatch) {
                    const [_, partyIndex, field] = partyMatch;
                    if (!parties.has(partyIndex)) {
                        parties.set(partyIndex, {});
                    }
                    const party = parties.get(partyIndex);
                    if (field === 'color') {
                        party.partyColor = value;
                    } else {
                        party[field] = field === 'name' ? value : Number(value);
                    }
                }

                if (subPartyMatch) {
                    const [_, partyIndex, subPartyIndex, field] = subPartyMatch;
                    const key = `${partyIndex}-${subPartyIndex}`;
                    if (!subParties.has(key)) {
                        subParties.set(key, { partyIndex });
                    }
                    const subParty = subParties.get(key);
                    if (field === 'color') {
                        subParty.partyColor = value;
                    } else {
                        subParty[field] = field === 'name' ? value : Number(value);
                    }
                }
            });

            // Organize sub-parties into their parent parties
            parties.forEach((party, partyIndex) => {
                party.subParties = [];
                subParties.forEach((subParty, key) => {
                    if (subParty.partyIndex === partyIndex) {
                        const { partyIndex, ...subPartyData } = subParty;
                        party.subParties.push(subPartyData);
                    }
                });
                if (party.subParties.length === 0) {
                    delete party.subParties;
                }
                finalData.parties.push(party);
            });

            // Send data to server
            fetch(`/api/elections/${electionId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(finalData)
            })
            .then(async response => {
                if (!response.ok) {
                    const errorResponse = await response.json();
                    throw new Error(errorResponse.message || 'Failed to update election');
                }
                return response.json();
            })
            .then(data => {
                console.log('Election updated successfully:', data);
                alert('Election updated successfully!');
                window.location.reload();
            });
            
    // Add your PUT/PATCH request here
});
        // Initialize the form with existing data when the page loads
        document.addEventListener('DOMContentLoaded', initializeForm);
    </script>
</body>
</html>