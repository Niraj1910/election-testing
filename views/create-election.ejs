<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Election</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="stylesheet" href="/stylesheets/tailwind.css">
    <link href="https://unpkg.com/mvp.css@1.12/dist/mvp.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <%- include('navbar.ejs') %>

    <div class="flex flex-col items-center justify-center px-6 w-full mt-4">
        <div class="w-full bg-white rounded-lg shadow border md:mt-0 xl:p-0">
            <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
                <p class="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl">
                    Create Election
                </p>
                <form id="createElectionForm" class="space-y-4">
                    <div>
                        <label for="state" class="block mb-2 text-sm font-medium text-gray-900">State</label>
                        <input type="text" required name="state" id="state" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg block w-full p-2.5">
                    </div>
                    <div>
                        <label for="totalSeats" class="block mb-2 text-sm font-medium text-gray-900">Total Seats</label>
                        <input type="number" required name="totalSeats" id="totalSeats" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg block w-full p-2.5">
                    </div>
                    <div>
                        <label for="declaredSeats" class="block mb-2 text-sm font-medium text-gray-900">Declared Seats</label>
                        <input type="number" required name="declaredSeats" id="declaredSeats" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg block w-full p-2.5">
                    </div>
                    <div>
                        <label for="halfWayMark" class="block mb-2 text-sm font-medium text-gray-900">Halfway Mark</label>
                        <input type="number" required name="halfWayMark" id="halfWayMark" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg block w-full p-2.5">
                    </div>
                    <div>
                        <label for="parties" class="block mb-2 text-sm font-medium text-gray-900">Parties</label>
                        <div id="parties" class="space-y-2">
                            <table class="w-full">
                                <thead>
                                    <tr>
                                        <th class="text-left">Party Name</th>
                                        <th class="text-left">Seats Won</th>
                                        <th class="text-left">Leading</th>
                                        <th class="text-left">Party Color</th>
                                        <th class="text-left">Subparties</th>
                                        <th class="text-right">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="partyTableBody">
                                    <!-- Parties will be added dynamically -->
                                </tbody>
                            </table>
                            <button type="button" onclick="showAddPartyDialog()" class="bg-blue-500 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center focus:ring-blue-800 text-white">
                                Add Party
                            </button>
                        </div>
                    </div>
                    <button type="button" onclick="createElection()" class="w-full bg-blue-500 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center focus:ring-blue-800 text-white">
                        Create Election
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Dialog for Adding Party -->
    <div id="addPartyDialog" class="hidden w-full fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-45">
        <div class="bg-white rounded-lg p-6 !w-[60%] shadow-lg">
            <h2 class="text-lg font-semibold mb-4">Add Party</h2>
            <label for="newPartyName" class="block mb-2">Party Name</label>
            <input type="text" id="newPartyName" class="w-full p-2 border rounded mb-2">
            <label for="partyWon" class="block mb-2">Seats Won</label>
            <input type="number" id="partyWon" class="w-full p-2 border rounded mb-2">
            <label for="partyLeading" class="block mb-2">Leading</label>
            <input type="number" id="partyLeading" class="w-full p-2 border rounded mb-2">
            <label for="partyLeading" class="block mb-2">Party Color</label>
            <input type="text" id="partyColor" class="w-full p-2 border rounded mb-2">
            <h3 class="text-md font-semibold mt-4 mb-2">Subparties</h3>
            <div id="subpartiesContainer" class="space-y-4">
                <!-- Subparties will be added dynamically -->
            </div>
            <button type="button" onclick="addSubparty()" class="bg-gray-300 px-3 py-2 rounded mt-2">Add Subparty</button>
            <div class="mt-4 flex justify-end">
                <button onclick="closeDialog('addPartyDialog')" class="bg-gray-300 px-4 py-2 rounded mr-2">Cancel</button>
                <button onclick="addParty()" class="bg-blue-500 px-4 py-2 text-white rounded">Add</button>
            </div>
        </div>
    </div>

    <script>
        let parties = [];

        function showAddPartyDialog() {
            document.getElementById('addPartyDialog').classList.remove('hidden');
        }

        function closeDialog(dialogId) {
            document.getElementById(dialogId).classList.add('hidden');
        }

        function addSubparty() {
            const subpartyDiv = document.createElement("div");
            subpartyDiv.className = "flex space-x-2 items-center border-b pb-2 mb-2";

            subpartyDiv.innerHTML = `
                <input type="text" placeholder="Subparty Name" class="p-2 border rounded w-1/3">
                <input type="number" placeholder="Seats Won" class="p-2 border rounded w-1/5">
                <input type="number" placeholder="Leading" class="p-2 border rounded w-1/5">
                <input type="text" placeholder="Party Color" title="Party Color" class="p-2 border rounded w-1/5">
                <button type="button" onclick="removeSubparty(this)" class="text-red-500 font-bold px-2">âœ•</button>
            `;
            document.getElementById("subpartiesContainer").appendChild(subpartyDiv);
        }

        function removeSubparty(button) {
            button.parentElement.remove();
        }

        function addParty() {
            const partyName = document.getElementById('newPartyName').value;
            const seatsWon = parseInt(document.getElementById('partyWon').value);
            const leading = parseInt(document.getElementById('partyLeading').value);
            const partyColor = document.getElementById('partyColor').value;

            // Collect subparty data
            const subParties = Array.from(document.getElementById('subpartiesContainer').children).map(subpartyDiv => {
                const subpartyName = subpartyDiv.children[0].value;
                const subpartySeats = parseInt(subpartyDiv.children[1].value);
                const subpartyLeading = parseInt(subpartyDiv.children[2].value);
                const subpartyColor = subpartyDiv.children[3].value;
                return { name: subpartyName, seats: subpartySeats, leading: subpartyLeading, partyColor: subpartyColor };
            });

            if (partyName) {
                parties.push({ name: partyName, seatsWon, leading, partyColor, subParties });
                renderParties();
                closeDialog('addPartyDialog');
            } else {
                alert("Please fill all fields correctly.");
            }
        }

        function renderParties() {
            const tbody = document.getElementById('partyTableBody');
            tbody.innerHTML = "";
            console.log(parties);
            parties.forEach((party, index) => {
                const subpartyList = party.subParties.map(sub => `${sub.name} (${sub.seats}, ${sub.leading}, ${sub.color})`).join(", ");
                const row = `<tr>
                    <td>${party.name}</td>
                    <td>${party.seatsWon}</td>
                    <td>${party.leading}</td>
                    <td>${party.partyColor}</td>
                    <td>${subpartyList || "None"}</td>
                    <td class="text-right">
                        <button onclick="removeParty(${index})" class="bg-red-500 text-white px-2 rounded">Remove</button>
                    </td>
                </tr>`;
                tbody.innerHTML += row;
            });
        }

        function removeParty(index) {
            parties.splice(index, 1);
            renderParties();
        }

        function createElection() {
            const state = document.getElementById('state').value;
            const totalSeats = parseInt(document.getElementById('totalSeats').value);
            const declaredSeats = parseInt(document.getElementById('declaredSeats').value);
            const halfWayMark = parseInt(document.getElementById('halfWayMark').value);

            if (state && !isNaN(totalSeats) && !isNaN(declaredSeats) && !isNaN(halfWayMark)) {
                const electionData = { state, totalSeats, declaredSeats, halfWayMark, parties };
                fetch(`/api/elections`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(electionData),
            })
            .then(async (response) => {
                if (!response.ok) {
                    const errorResponse = await response.json();
                    throw new Error(errorResponse.error);
                }
                return response.json();
            })
            .then((data) => {
                console.log('Election created successfully:', data);
                alert('Election created successfully!');
                window.location.replace('/dashboard')
            })
            .catch((error) => {
                console.error('Error:', error);
                alert(error.message);
            });
            } else {
                alert("Please fill all fields correctly.");
            }
        }
    </script>
</body>
</html>
